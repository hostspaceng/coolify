name: Build & Push customized Coolify

on:
  push:
    branches: ["cicd"]
  workflow_dispatch:

jobs:
  # build:
  #   name: Build & Push customized Coolify
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v1
          
  #     - name: Authenticate to Google Cloud
  #       id: auth
  #       uses: google-github-actions/auth@v1
  #       with:
  #        credentials_json: ${{ secrets.GCP_SA }}
         
  #     - name: Get Version
  #       id: version
  #       run: |
  #         VERSION=$(docker run --rm -v "$(pwd):/app" -w /app php:8.2-alpine3.16 php bootstrap/getVersion.php)
  #         echo "VERSION=${VERSION}" >> $GITHUB_ENV

  #     - name: Build and push to GCR
  #       run: |
  #         gcloud auth configure-docker
  #         docker buildx build \
  #           --push \
  #           --platform linux/amd64 \
  #           --tag gcr.io/my-bitnami-hosting/coolify:latest \
  #           --tag gcr.io/my-bitnami-hosting/coolify:${{ github.sha }} \
  #           --file docker/prod/Dockerfile .
  
  deploy:
    name: Deploy to Coolify Instance
    runs-on: ubuntu-latest

    steps: 

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Stop Running Coolify and Delete
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.IP_ADDRESS }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo -s

            echo "Stopping Running Coolify Containers......."
            sudo docker stop -t 0 coolify coolify-realtime coolify-db coolify-redis coolify-proxy

            echo "Removing coolify cointainers....."
            sudo docker rm coolify coolify-realtime coolify-db coolify-redis coolify-proxy

            echo "Remove Coolify Redis and database"
            sudo docker volume rm coolify-db coolify-redis

            echo "Removing coolify docker network"
            sudo docker network rm coolify

      - name: Deploy New coolify Version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.IP_ADDRESS }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo su -    

            echo "Generating new ssh keys for coolify"

            ssh-keygen -f /data/coolify/ssh/keys/id.root@host.docker.internal -t ed25519 -N '' -C root@coolify -y
            cat /data/coolify/ssh/keys/id.root@host.docker.internal.pub >>~/.ssh/authorized_keys
            chmod 600 ~/.ssh/authorized_keys

            echo "Replacing SSH Keys into coolify"

            sed -i "s|APP_ID=.*|APP_ID=$(openssl rand -hex 16)|g" /data/coolify/source/.env
            sed -i "s|APP_KEY=.*|APP_KEY=base64:$(openssl rand -base64 32)|g" /data/coolify/source/.env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=$(openssl rand -base64 32)|g" /data/coolify/source/.env
            sed -i "s|REDIS_PASSWORD=.*|REDIS_PASSWORD=$(openssl rand -base64 32)|g" /data/coolify/source/.env
            sed -i "s|PUSHER_APP_ID=.*|PUSHER_APP_ID=$(openssl rand -hex 32)|g" /data/coolify/source/.env
            sed -i "s|PUSHER_APP_KEY=.*|PUSHER_APP_KEY=$(openssl rand -hex 32)|g" /data/coolify/source/.env
            sed -i "s|PUSHER_APP_SECRET=.*|PUSHER_APP_SECRET=$(openssl rand -hex 32)|g" /data/coolify/source/.env

            echo "create coolify network"
            docker network create --attachable coolify

            echo "Spin up new coolify containers"
            docker compose --env-file /data/coolify/source/.env -f /data/coolify/source/docker-compose.yml -f /data/coolify/source/docker-compose.prod.yml up -d --pull always --remove-orphans --force-recreate







        
